#! /usr/bin/env python
import irclib
import ircbot
import time
import sys
import thread
import os

pubTimeCommand = ".time"
privTimeCommand = ".time"
sayCommand = ".speak"
PMTimeCommand = ".ptime"

class Bot(ircbot.SingleServerIRCBot):
    def __init__ (self, channels, nick, server, port, password, name):
        ircbot.SingleServerIRCBot.__init__(self, [(server,port)], nick, name, 10)
        self.nick = nick
        self.mychannels = channels
        self.password = password
        self.currentHour = self.getHour()
        self.currentMin = self.getMin() #sets current hour and minute, minute doesn't do anything right now
        thread.start_new_thread(self.wait, ()) #listens for the time change in a separate thread so we can listen for input as well
        self.array = []
        self.message = '' #message for the .time command
    def getHour(self):
        theTime = time.gmtime()#does things for GMT
        longHour = theTime.tm_hour #using this because I am far more comfortable with C than I am with Python
        shortHour = longHour % 12
        shortHour += 1 #>Daylight savings time
        return shortHour
    def on_kick(self, c, e):
        kickedNick = e.arguments()[0]
        if kickedNick == self.nick: #only does the following if the bot was the one that is kicked
            time.sleep(10)#waits 10 seconds
            for channel in self.mychannels:
                self.connection.join(channel) #joins all the channels if kicked, joining a channel the bot is already in is okay
    def getMin(self):
        theTime = time.gmtime()
        return theTime.tm_min
    
    def get_version(self):
        return "BIGBEN BOT" #CTCP VERSION reply

    def wait(self): #sounds off the hour
        message = ''
        while 1:
            if self.currentHour != self.getHour():
                self.currentHour = self.getHour() #makes it so the bongs only go off once
                for i in range (0, self.currentHour):
                    message += 'BONG '
                for channel in self.channels:
                    self.connection.privmsg(channel, message)
                message = '' #resets the message
            time.sleep(1) #only checks once a second to greatly reduce CPU usage
    def on_welcome(self, connection, event):
        for channel in self.mychannels:
            connection.join(channel)
        self.connection.privmsg("nickserv", "identify "+self.password) #idntify with nickserv

    def formulateMessage(self):
        if self.getMin() == 0:
            return "OI IT'S " + str(self.getHour()) + " BONG"
        elif self.getMin() == 1:
            return "OI IT'S 1 BIT PAST " + str(self.getHour()) + " BONG"
        return "OI IT'S " + str(self.getMin()) + " BITS PAST " + str(self.getHour()) + " BONG"
    def on_pubmsg (self, connection, event):
        message = event.arguments()[0]
        if message == pubTimeCommand:
            self.connection.privmsg(event.target(), self.formulateMessage()) #Say what time it is
        elif message == PMTimeCommand:
            self.connection.notice(event.source().split('!')[0], self.formulateMessage()) #tell the user who says the PMTimeCommand what time it is
        elif message.startswith(".") and message.endswith("ing"):
            if " " not in message and ".bing" not in message: # doesn't let the bot bong or respond to commands with a space in them
                response = message[:-3] #response starts as everything but the 'ing'
                response = response + "ong"
                response = response.lstrip('.')
                self.connection.privmsg(event.target(), response)


    def on_privmsg (self, connection, event):  #the user specifies the channel after the command
        eventList = event.arguments()[0].split(' ')
        if eventList[0] == privTimeCommand:
            self.connection.privmsg(eventList[1], self.formulateMessage()) #Say what time it is
        if eventList[0] == sayCommand:
            for i in range (2, len(eventList)): #starts at index 2 so we don't say the channel too
                self.array.append(eventList[i])
                self.array.append(' ') #creates a space between the words
            self.message = ''.join(self.array)
            self.connection.privmsg(eventList[1], self.message)
            self.message = ''
            self.array = [] #say what we say to the bot back to the channel

def main():
    global pubTimeCommand
    global privTimeCommand
    global sayCommand
    global PMTimeCommand # need to declare these as global so they can be modified
    if len(sys.argv) == 2:
        if sys.argv[1] == "-c":
            arguments = []
            file = open (sys.path[0] + "/COMMANDS", "r")
            for line in file.readlines():
                arguments.append(line.strip('\n'))#remove the newlines from the list
            channels = arguments[6].split(' ')
            nick = arguments[8]
            network = arguments[2]
            port = int(arguments[4])
            password = arguments[10]
            name = arguments[12]
            pubTimeCommand = arguments[14]
            privTimeCommand = arguments[16]
            sayCommand = arguments[18]
            PMTimeCommand = arguments[20]
    elif len(sys.argv) != 6:
        print "Usage: BigBen \"<network[:port]>\" \"<#channel #channel2>\" \"<nickname>\" \"<password>\" \"<ircname>\""
        print "OR BigBen -c" #prints usage
        sys.exit(1)
    else:
        s = sys.argv[1].split(":", 1)
        network = s[0]
        if len(s) == 2:
            try:
                port = int(s[1])
            except ValueError:
                print "Error: Erroneous port."
            sys.exit(1) #splits server and port
        else:
            port = 6667
            channels = sys.argv[2].split(' ') #creates the list of channels, the # is required
            nick = sys.argv[3] #nick
            password = sys.argv[4] #nickserv password
            name = sys.argv[5] #ircname
    bot = Bot(channels, nick, network, port, password, name)
    bot.start()

if __name__ == "__main__":
    main()
